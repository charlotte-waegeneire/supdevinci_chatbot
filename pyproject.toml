[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "supdevinci-chatbot"
version = "0.1.0"
description = "A Streamlit-based chatbot application"
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "streamlit",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.11.11",
    "pre-commit>=4.2.0",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8+
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",      # pycodestyle errors
    "E7",      # pycodestyle errors
    "E9",      # pycodestyle errors
    "F",       # Pyflakes
    "W",       # pycodestyle warnings
    "B",       # flake8-bugbear
    "I",       # isort
    "N",       # pep8-naming
    "UP",      # pyupgrade
    "S",       # flake8-bandit
    "C4",      # flake8-comprehensions
    "ICN",     # flake8-import-conventions
    "PIE",     # flake8-pie
    "T20",     # flake8-print
    "PT",      # flake8-pytest-style
    "Q",       # flake8-quotes
    "RSE",     # flake8-raise
    "RET",     # flake8-return
    "SIM",     # flake8-simplify
    "TID",     # flake8-tidy-imports
    "ARG",     # flake8-unused-arguments
    "ERA",     # eradicate
    "PL",      # Pylint
    "PERF",    # Perflint
    "RUF",     # Ruff-specific rules
]

ignore = [
    "S101",    # Use of assert detected (common in tests)
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "S603",    # subprocess call: check for execution of untrusted input
    "S607",    # Starting a process with a partial executable path
    "T201",    # print found (useful for debugging in development)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
known-first-party = ["chatbot"]
force-single-line = false
force-sort-within-sections = true

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
# Scripts can use print statements
"scripts/**/*" = ["T201"]
# Allow print statements in Streamlit apps for debugging
"**/*app*.py" = ["T201"]
"**/pages/**" = ["T201"]
